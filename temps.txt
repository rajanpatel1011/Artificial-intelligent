student1 -> {CSCI 755, EENG 643, ACCT 694}

CSCI 201 to CSCI 899 subject number
EENG 323 to EENG 888 Suject number 
CHEM 503 to 899 subject number 

CSCI is a subject 

anyway student can take <7, >2

a. list looks like CSCI 201 to 899 
b. list all uper leve such as CSCI 7XX to 8XX
c. count total number of couse there in csci and eeng
d. input list of couse and output like  CSCI 8xx hard - csci 201 easy

(defun ask-and-tell (statement)
    (let ((n (get-name statement))
        (v (get-valence statement))
        (o (get-object statement))
        (the-reply NIL))
        (cond ((question statement) (setf the-reply (reply n v o)))
        ((already-known n v o) (setf the-reply "I know that already"))
        ((contradictory n v o)
            (if (they-are-sure)
                (and (delete-entry n(invert v) o) (add-entry n v o)))
            (setf the-reply "Ok."))
            (setf the-reply "Ok."))
            (t (add-entry n v o) (setf the-reply "Ok.")))
            the-reply)
(defun get-name (statement)
    (cond (question statement) (second statement)))
 
(defun make-new-entry (name)
    (setf (gethash name "kb") '(nil nil)))
 
(defun add-entry (name valence object)
    (progn
        (if (not-known name) (setf (gethash name "kb") (nil nil)))
        (cond (eq Valence 'likes)
            (setf (gethash name "kb") (list (likes name)
                (cons object (dislikes name)))))))